package Default;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Menu {
	// instance variables
	Scanner keyboard = new Scanner(System.in);
	Bank bank = new Bank();
	boolean exit;
	
	public static void main(String[] args) {
		Menu menu = new Menu();
		menu.runMenu();
		
	}
	public void runMenu() {
		printHeader();
		while(!exit) {
			printMenu();
			int choice = getMenuChoice();
			performAction(choice);
		}
	}
	private int getMenuChoice() {
		// TODO Auto-generated method stub
		return 0;
	}
	private void performAction(int choice) {
		switch(choice) {
		case 0:
			System.out.println("Thank tou for using our application.");
			System.exit(0);
			break;
		case 1:{
			try {
				createAccount();
			}catch(InvalidAccountTypeExcepction ex) {
				System.out.println("Account was not created successfully.");
			}
		}
			break;
		case 2:
		makeADeposit();
			break;
		case 3:
			makeAWithdrawal();
			break;
		case 4:
			listBalances();
		default:
			System.out.println("Unkown error has occured");
		}
		
	}
	private void listBalances() {
		displayHeader("List Account Details");
		int account = selectAccount();
		if(account >= 0) {
			displayHeader("Account Details");
			System.out.println(bank.getCustomer(account).getAccount());
	}
}
	private void displayHeader(String message) {
		System.out.println();
		int width = message.length() + 6;
		StringBuilder sb = new StringBuilder();
		sb.append("+");
		for(int i = 0; i < width; i++) {
			sb.append("-");	
		}
		sb.append("+");
		System.out.println(sb.toString());
		System.out.println("   " + message + "   |");
	}
	private void makeAWithdrawal() {
		displayHeader("Make a Withdrawal");
		int account = selectAccount();
		if(account >= 0) {
		System.out.println("How much would you like to withdraw?: ");
		double amount = 0;
		try {
			amount = Double.parseDouble(keyboard.nextLine());
		}
		catch(NumberFormatException e){
			amount = 0;
		}
		bank.getCustomer(account).getAccount().withdraw(amount);
	}
		
	}
	private void makeADeposit() {
		displayHeader("Make a deposit");
		int account = selectAccount();
		if(account >= 0) {
		double amount = getAmount("How much would you like to deposit?: ") ;
		bank.getCustomer(account).getAccount().deposit(amount);
	}
}
	private int selectAccount() {
		ArrayList<Customer> customers = bank.getCustomers();
		if(customers.size() <= 0) {
			System.out.println("No customers at your bank.");
			return -1;
		}
		System.out.println("Select an account: ");
		for(int i = 0; i < customers.size(); i++) {
			System.out.println((i+1) + ") " + customers.get(i).basicInfo());
		}
		int account;
		System.out.print("Please enter you selection");
		try {
			account = Integer.parseInt(keyboard.nextLine()) -1; //if 1 is entered the choice is actually 0
		}
		catch(NumberFormatException e){
			account = -1;
		}
		if(account < 0 || account > customers.size()){
			System.out.println("Invalid account selected");
		}
		return account;
	}
	
	private String createAccount() {
		String accountType = "";
		boolean valid = false;
		while (!valid) {
			System.out.println("Please enter an account type(checking/savings): ");
			accountType = keyboard.nextLine();
			if (accountType.equalsIgnoreCase("checking") || accountType.equalsIgnoreCase("savings")) {
				valid = true;
			}
			else {
				System.out.println("Invalid account type selected. Please enter checking or savinds");
			}
		}
		return accountType;
	}
	
	private String askQuestion(String question, List<String> answers) {
		String response = "";
		Scanner input = new Scanner(System.in);
		boolean choices = ((answers == null) || answers.size() == 0)? false : true;
		boolean firstRun = true;
		do {
			if(!firstRun) {
				System.out.println("Invalid selection. Please try again.");
			}
		System.out.print(question);
		if(choices) {
			System.out.print("(");
			for(int i = 0; i < answers.size() - 1; ++i) {
				System.out.print(answers.get(i) + "/");
			}
			System.out.print(answers.get(answers.size()-1));
			System.out.print("):");
		}
		response = input.nextLine();
		firstRun = false;
		if(!choices) {
			break;
		}
		}while(!answers.contains(response)); // keeps running until you've picked an applicable answer
		return response; //if the answer is  null this will run once, if not there will be two options
	}
	private double getDeposit(String accountType) {
		return 0;
	}{
		double intialDeposit = 0;
		Boolean valid = false;
		while(!valid) {
			System.out.println("Please enter a inital deposit: ");
			try {
				intialDeposit = Double.parseDouble(keyboard.nextLine());
			}catch (NumberFormatException e) {
				System.out.println("Deposit must be a number.");
			}
			String accountType;
			if (accountType.equalsIgnoreCase("checking")) {
				if (intialDeposit <100) {
					System.out.println("Checking accounts require a minimum of $100 dollars to open.");
				} else {
					valid = true;
				}
			} else if (accountType.equalsIgnoreCase("savings")) {
				if (intialDeposit < 50) {
					System.out.println("Savings accounts require a minimum of $50 dollars to open.");
				} else {
					valid = true;
				}
			}
		}
		return intialDeposit;
	}
			
	
	private void createAnAccount() throws InvalidAccountExcepction {
		displayHeader("Create an Account");
		//Get account info
		String accountType = askQuestion("Please enter an account type: ", Arrays.asList("checking","savings"));
		String firstName = askQuestion("Please enter your first name: ", null);
		String lastName = askQuestion("Please enter your last name: ", null);
		String ssn = askQuestion("Please enter your social security number: ", null);
		double initialDeposit = getDeposit(accountType);
		//creating an account
		Account account;
		if(accountType.equalsIgnoreCase("checking")) {
			account = new Checking(initialDeposit);
		}
		else if(accountType.equalsIgnoreCase("savings")) {
			account = new Savings(initialDeposit);
		}
		else {
			throw new InvalidAccountException();
		}
		Customer customer = new Customer(firstName, lastName, ssn, account);
		bank.addCustomer(customer);
	}
	private double getAmount(String question) {
		System.out.println(question);
		double amount = 0;
		try {
			amount = Double.parseDouble(keyboard.nextLine());
		}
		catch(NumberFormatException e){
			amount = 0;
		}
		return amount; 
	}

	private int getInput() {
		int choice = -1;
		do {
			System.out.println("Enter your choice: ");
		try {
			choice = Integer.parseInt(keyboard.nextLine());
		}
		catch(NumberFormatException e) {
			System.out.println("Incalid selection. NUmbers only please.");
		}
		if(choice < 0 || choice > 4) {
			System.out.println("Choice outside of range. PLease choose again.");
		}
	}while (choice < 0 || choice > 4);
	return choice;
}
	private void printMenu() {
		displayHeader("Please make a selection");
		System.out.println("Please make a selection: ");
		System.out.println("1) Create a new Account");
		System.out.println("2) Make a deposit");
		System.out.println("3( Nake a withdrawal");
		System.out.println("4) List account balance");
		System.out.println("0) Exit");
		
	}
	private void printHeader() {
		System.out.println("+---------------------+");
		System.out.println("|    Welcome to TCU   |");
		System.out.println("|   Expert FInancing  |");
		System.out.println("+---------------------+");
		
	}
}
